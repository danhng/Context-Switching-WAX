1. target data
- sample rate
- Time: hh:mm:ss 
- sample number 
- x 
- y 
- z 

2. design
The aim of the project is derive an algorithm used in IMUs that is able to contextually turn on the gyro by  detecting SiSt transition and StWk transition and turning on neccessary sensors if that's the case. This will help in extending the battery of the devices making it last longer which is very efficient and productive given that patients or the elderly people don't move all the time, on the other side, most of the time they are in a static posture such as sitting, standing, lying. 
During these periods, all sensors needs not be active. 

2.1 SiSt transition
One of the three dimensions are selected to be the primary dimension along which the user body is. The other two dimensions are hence considered supporting dimensions.
Approach: 
1. Decide whether the user is still. Static posture.

P1: Detecting the current static posture 
- This will detect current static posture of the usr. 
- CSP is limited to: 
	+ Straight/standing/sitting still
	+ Other (dynamic activities such as walking, running)
Algorithm determineStaticPosture

SP1: Detecting whether the usr is in static stature or not 
 
Problems:
- Common Machine learning approaches are very challenging to apply due to the extended complexity in computations.

Condition for static stature: 
- Root mean square of x y z (sqrt(x^2+y^2+z^2) ~1g) :  accelerations is ~1g

Problems:
- Real time processing. 
- Operating Frequency of IMUs: ~32 mHZ (See manuals) 32 millions clock cycles/second - 16MIPS.


Algorithm design:
Features
1. Root mean square of x y z
2. Standard Deviation of z
3. Mean y
4. Integral of (z.dt) over integral of (mean z dt) (assume xo = 1)

Data structure for a sample
sample
- x: int
- y: int
- z: int
- time: date time
- order: sample order.

Signal
<Datastructure> of sample objs.
Datastructure
- List or hash
- What needed?
- Sequentially accessing and processing ordered samples.
- Potentially good for upsampling and down sampling
-       Is random access applicable?
=> Linked list

  
